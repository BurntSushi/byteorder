name: ci
on:
  pull_request:
  push:
    branches:
    - master
  schedule:
  - cron: '00 01 * * *'
jobs:
  test:
    name: test
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, TARGET is set to `--target matrix.target`.
      TARGET:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
        - pinned
        - stable
        - stable-32
        - stable-mips
        - beta
        - nightly
        - macos
        - win-msvc
        - win-gnu
        include:
        - build: pinned
          os: ubuntu-latest
          rust: 1.41.1
        - build: stable
          os: ubuntu-latest
          rust: stable
        - build: stable-32
          os: ubuntu-latest
          rust: stable
          target: i686-unknown-linux-gnu
        - build: stable-mips
          os: ubuntu-latest
          rust: stable
          target: mips64-unknown-linux-gnuabi64
        - build: beta
          os: ubuntu-latest
          rust: beta
        - build: nightly
          os: ubuntu-latest
          rust: nightly
        - build: macos
          os: macos-latest
          rust: stable
        - build: win-msvc
          os: windows-latest
          rust: stable
        - build: win-gnu
          os: windows-latest
          rust: stable-x86_64-gnu
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Use Cross
      if: matrix.target != ''
      run: |
        # We used to install 'cross' from master, but it kept failing. So now
        # we build from a known-good version until 'cross' becomes more stable
        # or we find an alternative. Notably, between v0.2.1 and current
        # master (2022-06-14), the number of Cross's dependencies has doubled.
        cargo install --bins --git https://github.com/cross-rs/cross --tag v0.2.1
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET=--target ${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET }}"

    - name: Show CPU info for debugging
      if: matrix.os == 'ubuntu-latest'
      run: lscpu

    - name: Build
      run: ${{ env.CARGO }} build --verbose $TARGET

    - name: Build (no default)
      run: ${{ env.CARGO }} build --verbose $TARGET --no-default-features

    - name: Build docs
      run: ${{ env.CARGO }} doc --verbose $TARGET

    # Our dev dependencies evolve more rapidly than we'd like, so only run
    # tests when we aren't pinning the Rust version.
    - name: Tests
      if: matrix.build != 'pinned'
      run: ${{ env.CARGO }} test --verbose $TARGET

    - name: Tests (no default, lib only)
      if: matrix.build != 'pinned'
      run: ${{ env.CARGO }} test --verbose --no-default-features --lib $TARGET

    - name: Tests (i128)
      if: matrix.build != 'pinned'
      run: ${{ env.CARGO }} test --verbose --features i128 $TARGET

    - name: Tests (no default, lib only, i128)
      if: matrix.build != 'pinned'
      run: ${{ env.CARGO }} test --verbose --no-default-features --features i128 --lib $TARGET

    - name: Compile benchmarks
      if: matrix.build == 'nightly'
      run: cargo bench --verbose --no-run $TARGET

    - name: Compile benchmarks (no default)
      if: matrix.build == 'nightly'
      run: cargo bench --verbose --no-run --no-default-features $TARGET

    - name: Compile benchmarks (i128)
      if: matrix.build == 'nightly'
      run: cargo bench --verbose --no-run --features i128 $TARGET

    - name: Compile benchmarks (no default, i128)
      if: matrix.build == 'nightly'
      run: cargo bench --verbose --no-run --no-default-features --features i128 $TARGET

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: cargo fmt -- --check
